pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "theglad/dream-vacation-app-frontend" 
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'develop', url: 'https://github.com/theglad-x/Dream-Vacation-App.git'
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('frontend') {
                            sh 'npm ci'
                        }
                    }
                }
            }
        }
        
        stage('Code Analysis') {
            environment {
                scannerHome = tool name: 'sonarqube'
            }
            steps {
                script {
                    dir('frontend') {
                        withSonarQubeEnv('sonarqube') {
                            withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                                sh """
                                    ${scannerHome}/bin/sonar-scanner \
                                        -Dsonar.projectKey="dream-vacation-app-backend" \
                                        -Dsonar.projectName="dream-vacation-app-backend" \
                                        -Dsonar.sources="." \
                                        -Dsonar.exclusions="**/node_modules/**" \
                                        -Dsonar.login="${SONAR_AUTH_TOKEN}"
                                """
                            }
                        }
                    }
                }
            }
        }
                stage('Build Frontend') {
                    steps {
                        dir('frontend') {
                            sh 'npm run build'
                        }
                    }
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        """
                        def shortCommit = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                        dir('frontend') {
                            sh """
                                docker build -t ${DOCKER_IMAGE}:latest -t ${DOCKER_IMAGE}:${shortCommit} .
                                docker push ${DOCKER_IMAGE}:latest
                                docker push ${DOCKER_IMAGE}:${shortCommit}
                            """
                        }
                    }
                }
            }
        }
        
        stage('Scan Docker Image') {
            steps {
                script {
                    sh """
                        docker run --rm aquasec/trivy image --exit-code 1 ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        } 
    }
}